{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBACrCI,EAAMN,EAAKE,cAAc,yBAgC/B,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACPH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE1BA,EAAM,G,CAxCbT,EAAKiB,iBAAiB,UAEtB,SAAqBC,GACnBA,EAAMC,iBACN,MAAMC,EAAeC,SAASlB,EAAWmB,OACnCC,EAAOF,SAASjB,EAAUkB,OAC1BE,EAASH,SAAShB,EAAYiB,OACpChB,EAAImB,UAAW,EACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAElCnB,EAAcmB,EADAN,EAAeM,EAAIH,GAE9BI,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA9B,GAAS+B,OAAOC,QAAQ,qBAAqBtB,EAAW,QAAQC,MAAU,IAE3EsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA9B,GAAS+B,OAAOG,QAAQ,oBAAoBxB,EAAW,QAAQC,MAAU,IAE1EwB,SAAQ,KACHP,IAAMF,EAAS,IACjBlB,EAAImB,UAAW,EACftB,EAAWmB,MAAQ,GACnBlB,EAAUkB,MAAQ,GAClBjB,EAAYiB,MAAQ,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';  \n\nconst form = document.querySelector(\".form\")\nconst inputDelay = document.querySelector(\"input[name='delay']\")\nconst inputStep = document.querySelector(\"input[name='step']\")\nconst inputAmount = document.querySelector(\"input[name='amount']\")\nconst btn = form.querySelector(\"button[type='submit']\");\n\n\nform.addEventListener(\"submit\", formPromise)\n\nfunction formPromise(event) {\n  event.preventDefault();\n  const initialDelay = parseInt(inputDelay.value);\n  const step = parseInt(inputStep.value);\n  const amount = parseInt(inputAmount.value);\n  btn.disabled = true;\n  for (let i = 0; i < amount; i += 1) {\n    const delay = initialDelay + i * step;\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position + 1} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position + 1} in ${delay}ms`)\n      })\n      .finally(() => {\n        if (i === amount - 1) {\n          btn.disabled = false\n          inputDelay.value = ''\n          inputStep.value = ''\n          inputAmount.value = ''\n      }\n    })\n  }\n  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay })\n    } else {\n      // Reject\n      reject({ position, delay })\n    }\n    }, delay)\n    })\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$btn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","initialDelay","parseInt","value","step","amount","disabled","i","then","$parcel$interopDefault","Notify","success","catch","failure","finally"],"version":3,"file":"03-promises.06c509d1.js.map"}